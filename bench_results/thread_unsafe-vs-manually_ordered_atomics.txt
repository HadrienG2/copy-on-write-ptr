=== MICROBENCHMARK : THREAD-UNSAFE COW POINTER VS MANUALLY ORDERED ATOMICS ===

hadrien@pc-grasland:~/Bureau/Programmation/TestCoW$ g++ -O0 -std=c++11 bench_unsafe_vs_other.cpp -o bench_unsafe_vs_other.bin
[...]

Creating 100000000 pointers from raw pointers
With a thread-unsafe implementation, this operation takes 9.60142 s
With the tested implementation, it takes 10.4198 s (1.08524x slower)

Creating AND move-constructing 2500000000 pointers
With a thread-unsafe implementation, this operation takes 394.183 s
With the tested implementation, it takes 401.842 s (1.01943x slower)

Copy-constructing 1000000000 pointers
With a thread-unsafe implementation, this operation takes 48.1861 s
With the tested implementation, it takes 56.815 s (1.17907x slower)

Copy-constructing AND move-assigning 5000000000 pointers
With a thread-unsafe implementation, this operation takes 478.704 s
With the tested implementation, it takes 600.547 s (1.25453x slower)

Copy-assigning 64000000 pointers
With a thread-unsafe implementation, this operation takes 1.05171 s
With the tested implementation, it takes 2.07142 s (1.96958x slower)

Reading from 5000000000 pointers
With a thread-unsafe implementation, this operation takes 35.1065 s
With the tested implementation, it takes 35.2061 s (1.00284x slower)

Performing 1920000000 pointer copies AND cold writes
With a thread-unsafe implementation, this operation takes 604.841 s
With the tested implementation, it takes 698.893 s (1.1555x slower)

Performing 1920000000 warm pointer writes
With a thread-unsafe implementation, this operation takes 21.4445 s
With the tested implementation, it takes 41.5779 s (1.93886x slower)


=== RESULTS ANALYSIS ===

For details on the methodology being used here, please refer to the comparison between thread-unsafe
copy-on-write and raw shared_ptrs.

Move-construction:

   thread-unsafe creation takes 96.0ns
   atomics-based creation takes 104ns
   thread-unsafe creation and move-construction takes 158ns
   atomics-based creation and move-construction takes 161ns
   
   therefore,
   
   thread-unsafe move-construction takes 62ns
   atomics-based move-construction takes 57ns
   
   hence the later is 0.9x slower

Move-assignment:

   thread-unsafe copy-construction takes 48.2ns
   atomics-based copy-construction takes 56.8ns
   thread-unsafe copy-construction and move-assignment takes 95.7ns
   atomics-based copy-construction and move-assignment takes 120ns
   
   therefore,
   
   thread-unsafe move-assignment takes 47.5ns
   atomics-based move-assignment takes 63ns
   
   hence the later is 1.3x slower

Cold writes:

   thread-unsafe copy-assignment takes 16.4ns
   atomics-based copy-assignment takes 32.4ns
   thread-unsafe copy-assignment and cold write takes 315ns
   atomics-based copy-assignment and cold write takes 364ns
   
   therefore,
   
   thread-unsafe cold write takes 299ns
   atomics-based cold write takes 332ns
   
   hence the later is 1.1x slower


=== CONCLUSIONS ===

In terms of elementary operations, before compiler optimization kicks in...
   * Creation from a raw pointer is 1.1x slower    => Comparable to mutex
   * Move-constructing is 0.9x slower              => Slightly faster (1.1x for mutex)
   * Copy-constructing is 1.2x slower              => Comparable to mutex
   * Moving is 1.3x slower                         => Comparable to mutex
   * Copying is 2.0x slower                        => Slightly faster (2.3x for mutex)
   * Reading is 1.0x slower                        => Comparable to mutex
   * Cold-writing is 1.1x slower                   => Comparable to mutex
   * Warm-writing is 1.9x slower                   => Much faster (2.9x for mutex)

Unlike sequentially consistent atomics, manually ordered atomics emerge as an attractive alternative to mutexes.
They are always at least as fast as mutexes, and exhibit a nice speed advantage in the two areas where mutexes shine
least, copy assignment (which requires synchronization) and warm writes (which are the mutex' weakest point).

Whether they are worth it or not depends on one's hunger for speed: atomics are tricky, manually ordering them is
trickier, so this code is much more likely to exhibit bugs, and to gain some across maintenance years. However, I would
say that this primitive might convince a copy-on-write nonbeliever that synchronization across threads can be done
reasonably cheaply.
